==========================================================================
linalg.map without ins
==========================================================================
func.func @map_no_inputs(%init: tensor<64xf32>) -> tensor<64xf32> {
   %add = linalg.map
      outs(%init:tensor<64xf32>)
      () {
        %0 = arith.constant 0.0: f32
        linalg.yield %0: f32
      }
  func.return %add : tensor<64xf32>
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (linalg_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type))))))
                  (block_arg_list)
                  (region
                    (entry_block
                      (operation
                        (op_result_list
                          (op_result
                            (value_use)))
                        (custom_operation
                          (arith_dialect
                            (literal_and_type
                              (literal
                                (float_literal))
                              (type
                                (builtin_type
                                  (float_type)))))))
                      (operation
                        (custom_operation
                          (linalg_dialect
                            (value_use_list
                              (value_use))
                            (type_list_no_parens
                              (type
                                (builtin_type
                                  (float_type))))))))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))))))))
==========================================================================
linalg.map with ins and outs
==========================================================================
func.func @map_binary_memref(%lhs: memref<64xf32>, %rhs: memref<64xf32>,
                      %init: memref<64xf32>) {
   linalg.map
      ins(%lhs, %rhs: memref<64xf32>, memref<64xf32>)
      outs(%init:memref<64xf32>)
      (%lhs_elem: f32, %rhs_elem: f32) {
        %0 = arith.addf %lhs_elem, %rhs_elem: f32
        linalg.yield %0: f32
      }
  func.return
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type))))))
        (region
          (entry_block
            (operation
              (custom_operation
                (linalg_dialect
                  (value_use_list
                    (value_use)
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type)))))
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type))))))
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type))))))
                  (block_arg_list
                    (value_use)
                    (type
                      (builtin_type
                        (float_type)))
                    (value_use)
                    (type
                      (builtin_type
                        (float_type))))
                  (region
                    (entry_block
                      (operation
                        (op_result_list
                          (op_result
                            (value_use)))
                        (custom_operation
                          (arith_dialect
                            (value_use)
                            (value_use)
                            (type
                              (builtin_type
                                (float_type))))))
                      (operation
                        (custom_operation
                          (linalg_dialect
                            (value_use_list
                              (value_use))
                            (type_list_no_parens
                              (type
                                (builtin_type
                                  (float_type))))))))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
==========================================================================
tensor.collapse_shape and tensor.expand_shape without reassocation
==========================================================================
func.func @tensor_reshape_zero_dim(%arg0 : tensor<1x1xf32>, %arg1 : tensor<f32>)
    -> (tensor<f32>, tensor<1x1xf32>) {
  %0 = tensor.collapse_shape %arg0 [] : tensor<1x1xf32> into tensor<f32>
  %1 = tensor.expand_shape %0 [] : tensor<f32> into tensor<1x1xf32>
  return %0, %1 : tensor<f32>, tensor<1x1xf32>
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (nested_idx_list)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (nested_idx_list)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use)
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))))))))
==========================================================================
tensor.collapse_shape with reassocation
==========================================================================
func.func @legal_collapsing_reshape_dynamic_tensor
  (%arg0: tensor<?x?x?x4x?xf32>) -> tensor<?x?x?xf32>
{
  %0 = tensor.collapse_shape %arg0 [[0], [1], [2, 3, 4]] :
    tensor<?x?x?x4x?xf32> into tensor<?x?x?xf32>
  return %0 : tensor<?x?x?xf32>
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (nested_idx_list
                    (nested_idx_list
                      (integer_literal))
                    (nested_idx_list
                      (integer_literal))
                    (nested_idx_list
                      (integer_literal)
                      (integer_literal)
                      (integer_literal)))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))))))))
