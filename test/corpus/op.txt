==========================================================================
linalg.map without ins
==========================================================================
func.func @map_no_inputs(%init: tensor<64xf32>) -> tensor<64xf32> {
   %add = linalg.map
      outs(%init:tensor<64xf32>)
      () {
        %0 = arith.constant 0.0: f32
        linalg.yield %0: f32
      }
  func.return %add : tensor<64xf32>
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (linalg_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type))))))
                  (block_arg_list)
                  (region
                    (entry_block
                      (operation
                        (op_result_list
                          (op_result
                            (value_use)))
                        (custom_operation
                          (arith_dialect
                            (literal_and_type
                              (literal
                                (float_literal))
                              (type
                                (builtin_type
                                  (float_type)))))))
                      (operation
                        (custom_operation
                          (linalg_dialect
                            (value_use_list
                              (value_use))
                            (type_list_no_parens
                              (type
                                (builtin_type
                                  (float_type))))))))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))))))))
==========================================================================
linalg.map with ins and outs
==========================================================================
func.func @map_binary_memref(%lhs: memref<64xf32>, %rhs: memref<64xf32>,
                      %init: memref<64xf32>) {
   linalg.map
      ins(%lhs, %rhs: memref<64xf32>, memref<64xf32>)
      outs(%init:memref<64xf32>)
      (%lhs_elem: f32, %rhs_elem: f32) {
        %0 = arith.addf %lhs_elem, %rhs_elem: f32
        linalg.yield %0: f32
      }
  func.return
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type))))))
        (region
          (entry_block
            (operation
              (custom_operation
                (linalg_dialect
                  (value_use_list
                    (value_use)
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type)))))
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type))))))
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type))))))
                  (block_arg_list
                    (value_use)
                    (type
                      (builtin_type
                        (float_type)))
                    (value_use)
                    (type
                      (builtin_type
                        (float_type))))
                  (region
                    (entry_block
                      (operation
                        (op_result_list
                          (op_result
                            (value_use)))
                        (custom_operation
                          (arith_dialect
                            (value_use)
                            (value_use)
                            (type
                              (builtin_type
                                (float_type))))))
                      (operation
                        (custom_operation
                          (linalg_dialect
                            (value_use_list
                              (value_use))
                            (type_list_no_parens
                              (type
                                (builtin_type
                                  (float_type))))))))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
==========================================================================
tensor.collapse_shape and tensor.expand_shape without reassocation
==========================================================================
func.func @tensor_reshape_zero_dim(%arg0 : tensor<1x1xf32>, %arg1 : tensor<f32>)
    -> (tensor<f32>, tensor<1x1xf32>) {
  %0 = tensor.collapse_shape %arg0 [] : tensor<1x1xf32> into tensor<f32>
  %1 = tensor.expand_shape %0 [] : tensor<f32> into tensor<1x1xf32>
  return %0, %1 : tensor<f32>, tensor<1x1xf32>
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (nested_idx_list)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (nested_idx_list)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use)
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))))))))
==========================================================================
tensor.collapse_shape with reassocation
==========================================================================
func.func @legal_collapsing_reshape_dynamic_tensor
  (%arg0: tensor<?x?x?x4x?xf32>) -> tensor<?x?x?xf32>
{
  %0 = tensor.collapse_shape %arg0 [[0], [1], [2, 3, 4]] :
    tensor<?x?x?x4x?xf32> into tensor<?x?x?xf32>
  return %0 : tensor<?x?x?xf32>
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (nested_idx_list
                    (nested_idx_list
                      (integer_literal))
                    (nested_idx_list
                      (integer_literal))
                    (nested_idx_list
                      (integer_literal)
                      (integer_literal)
                      (integer_literal)))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))))))))
==========================================================================
tensor.gather and tensor.scatter
==========================================================================
func.func @gather_scatter(%dest : tensor<4x5x6xf32>, %indices: tensor<1x3x2xindex>,
  %indices_i32: tensor<1x3x2xi32>) {
  %gathered = tensor.gather %dest[%indices_i32] gather_dims([1, 2]) unique:
    (tensor<4x5x6xf32>, tensor<1x3x2xi32>) -> tensor<1x3x4x1x1xf32>
  %rank_reduced_gathered = tensor.gather %dest[%indices] gather_dims([1, 2]) unique:
    (tensor<4x5x6xf32>, tensor<1x3x2xindex>) -> tensor<1x3x4xf32>

  %scattered = tensor.scatter %gathered into %dest[%indices]
      scatter_dims([1, 2]) unique:
    (tensor<1x3x4x1x1xf32>, tensor<4x5x6xf32>, tensor<1x3x2xindex>) -> tensor<4x5x6xf32>
  %rank_reduced_scattered = tensor.scatter %rank_reduced_gathered into %dest[%indices_i32]
      scatter_dims([1, 2]) unique:
    (tensor<1x3x4xf32>, tensor<4x5x6xf32>, tensor<1x3x2xi32>) -> tensor<4x5x6xf32>
  return
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (index_type)))))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (integer_type))))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (gather_dims_attr
                    (integer_literal)
                    (integer_literal))
                  (unique_attr)
                  (function_type
                    (type_list_parens
                      (type_list_no_parens
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (float_type)))))
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (integer_type)))))))
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (gather_dims_attr
                    (integer_literal)
                    (integer_literal))
                  (unique_attr)
                  (function_type
                    (type_list_parens
                      (type_list_no_parens
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (float_type)))))
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (index_type)))))))
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (value_use)
                  (scatter_dims_attr
                    (integer_literal)
                    (integer_literal))
                  (unique_attr)
                  (function_type
                    (type_list_parens
                      (type_list_no_parens
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (float_type)))))
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (float_type)))))
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (index_type)))))))
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (value_use)
                  (scatter_dims_attr
                    (integer_literal)
                    (integer_literal))
                  (unique_attr)
                  (function_type
                    (type_list_parens
                      (type_list_no_parens
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (float_type)))))
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (float_type)))))
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (integer_type)))))))
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
==========================================================================
tensor.extract_slice
==========================================================================
func.func @slice(%t: tensor<8x16x4xf32>, %idx : index) {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = tensor.extract_slice %t[%c0, %c0, %c0][%idx, %idx, %idx][%c1, %c1, %c1]
    : tensor<8x16x4xf32> to tensor<?x?x?xf32>
  %2 = tensor.extract_slice %t[0, 2, 0][4, 4, 4][1, 1, 1]
    : tensor<8x16x4xf32> to tensor<4x4x4xf32>
  %3 = tensor.extract_slice %t[0, 2, 0][4, 1, 4][1, 1, 1]
    : tensor<8x16x4xf32> to tensor<4x4xf32>

  return
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (index_type))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (literal_and_type
                    (literal
                      (integer_literal))
                    (type
                      (builtin_type
                        (index_type)))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (literal_and_type
                    (literal
                      (integer_literal))
                    (type
                      (builtin_type
                        (index_type)))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
==========================================================================
tensor.insert_slice
==========================================================================
func.func @insert_slice(
    %t: tensor<8x16x4xf32>,
    %td: tensor<8x?x4xf32>,
    %t2: tensor<16x32x8xf32>,
    %t3: tensor<4x4xf32>,
    %idx : index,
    %sz : index) {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = tensor.insert_slice %t into %t2[%c0, %c0, %c0][8, 16, 4][%c1, %c1, %c1]
    : tensor<8x16x4xf32> into tensor<16x32x8xf32>
  %2 = tensor.insert_slice %t into %t2[%c0, %idx, %c0][8, 16, 4][%c1, 1, %c1]
    : tensor<8x16x4xf32> into tensor<16x32x8xf32>
  %3 = tensor.insert_slice %t3 into %t[0, 2, 0][4, 1, 4][1, 1, 1]
    : tensor<4x4xf32> into tensor<8x16x4xf32>
  %4 = tensor.insert_slice %td into %t[0, %idx, 0][8, %sz, 4][1, 1, 1]
    : tensor<8x?x4xf32> into tensor<8x16x4xf32>

  return
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (index_type)))
          (value_use)
          (type
            (builtin_type
              (index_type))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (literal_and_type
                    (literal
                      (integer_literal))
                    (type
                      (builtin_type
                        (index_type)))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (literal_and_type
                    (literal
                      (integer_literal))
                    (type
                      (builtin_type
                        (index_type)))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (value_use)
                  (value_use)
                  (value_use)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (value_use)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (value_use)
                  (integer_literal)
                  (value_use)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use)
                  (integer_literal)
                  (value_use)
                  (integer_literal)
                  (integer_literal)
                  (value_use)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type)))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
==========================================================================
tensor.rank, tensor.generate, tensor.yield, tensor.extract
==========================================================================
func.func @extract_from_tensor.generate(%idx: index, %tensor: tensor<*xf32>) -> index {
  %size = tensor.rank %tensor : tensor<*xf32>
  %0 = tensor.generate %size {
    ^bb0(%arg0: index):
    %1 = tensor.dim %tensor, %arg0 : tensor<*xf32>
    tensor.yield %1 : index
  } : tensor<?xindex>
  %1 = tensor.extract %0[%idx] : tensor<?xindex>
  return %1 : index
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_use)
          (type
            (builtin_type
              (index_type)))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (index_type)))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use_list
                    (value_use))
                  (region
                    (block
                      (block_label
                        (caret_id)
                        (block_arg_list
                          (value_use)
                          (type
                            (builtin_type
                              (index_type)))))
                      (operation
                        (op_result_list
                          (op_result
                            (value_use)))
                        (custom_operation
                          (tensor_dialect
                            (value_use)
                            (value_use)
                            (type
                              (builtin_type
                                (tensor_type
                                  (dim_list
                                    (float_type))))))))
                      (operation
                        (custom_operation
                          (tensor_dialect
                            (value_use)
                            (type
                              (builtin_type
                                (index_type))))))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (index_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (value_use)
                  (value_use_list
                    (value_use))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (index_type))))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (index_type)))))))))))))
