================================================================================
func.func with attribute
================================================================================
func.func @count(%x: i64) -> (i64, i64)
  attributes { fruit: "banana" } {
  return %x, %x: i64, i64
}
--------------------------------------------------------------------------------
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (func_arg_list
          (value_use)
          (type
            (builtin_type
              (integer_type))))
        (func_return
          (type_list_attr_parens
            (type
              (builtin_type
                (integer_type)))
            (type
              (builtin_type
                (integer_type)))))
        (attribute
          (dictionary_attribute
            (attribute_entry
              (bare_id)
              (literal
                (string_literal)))))
        (region
          (entry_block
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use)
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (integer_type)))
                    (type
                      (builtin_type
                        (integer_type)))))))))))))
================================================================================
func.func with result attribute
================================================================================
func.func @example_fn_result() -> (f64 {dialectName.attrName = 0 : i64})
--------------------------------------------------------------------------------
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (func_arg_list)
        (func_return
          (type_list_attr_parens
            (type
              (builtin_type
                (float_type)))
            (attribute
              (dictionary_attribute
                (attribute_entry
                  (bare_id)
                  (literal
                    (integer_literal))
                  (type
                    (builtin_type
                      (integer_type))))))))))))
================================================================================
func.func with argument attribute
================================================================================
func.func @example_fn_arg(%x: i32 {swift.self = unit})
--------------------------------------------------------------------------------
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (func_arg_list
          (value_use)
          (type
            (builtin_type
              (integer_type)))
          (attribute
            (dictionary_attribute
              (attribute_entry
                (bare_id)
                (literal
                  (unit_literal))))))))))
================================================================================
strided attribute in memref
================================================================================
func.func @dot_view(%arg0: memref<?xf32, strided<[1], offset: ?>>,
  %arg1: memref<?xf32, strided<[1], offset: ?>>, %arg2: memref<f32>) {
  linalg.dot ins(%arg0, %arg1 : memref<?xf32, strided<[1], offset: ?>>,
                                memref<?xf32, strided<[1], offset: ?>>)
             outs(%arg2:  memref<f32>)
  return
}
--------------------------------------------------------------------------------
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (func_arg_list
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type))
                (attribute_value
                  (builtin_attribute
                    (strided_layout
                      (dim_list)))))))
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type))
                (attribute_value
                  (builtin_attribute
                    (strided_layout
                      (dim_list)))))))
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type))))))
        (region
          (entry_block
            (operation
              (custom_operation
                (linalg_dialect
                  (value_use_list
                    (value_use)
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type))
                          (attribute_value
                            (builtin_attribute
                              (strided_layout
                                (dim_list)))))))
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type))
                          (attribute_value
                            (builtin_attribute
                              (strided_layout
                                (dim_list))))))))
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type)))))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
================================================================================
affine_map attribute in linalg.generic
================================================================================
func.func @copy_view(%arg0: memref<?xf32, strided<[1], offset: ?>>,
  %arg1: memref<?xf32, strided<[1], offset: ?>>) {
  linalg.generic {
    iterator_types = ["parallel"],
    indexing_maps = [ affine_map<(i) -> (i)>, affine_map<(i) -> (i)>] }
   ins(%arg0: memref<?xf32, strided<[1], offset: ?>>)
   outs(%arg1: memref<?xf32, strided<[1], offset: ?>>) {
    ^bb0(%a: f32, %b: f32):
      linalg.yield %a : f32
  }
  return
}
--------------------------------------------------------------------------------
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (func_arg_list
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type))
                (attribute_value
                  (builtin_attribute
                    (strided_layout
                      (dim_list)))))))
          (value_use)
          (type
            (builtin_type
              (memref_type
                (dim_list
                  (float_type))
                (attribute_value
                  (builtin_attribute
                    (strided_layout
                      (dim_list))))))))
        (region
          (entry_block
            (operation
              (custom_operation
                (linalg_dialect
                  (attribute
                    (dictionary_attribute
                      (attribute_entry
                        (bare_id)
                        (literal
                          (string_literal)))
                      (attribute_entry
                        (bare_id)
                        (attribute_value
                          (builtin_attribute
                            (affine_map)
                            (affine_map))))))
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type))
                          (attribute_value
                            (builtin_attribute
                              (strided_layout
                                (dim_list))))))))
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (memref_type
                          (dim_list
                            (float_type))
                          (attribute_value
                            (builtin_attribute
                              (strided_layout
                                (dim_list))))))))
                  (region
                    (block
                      (block_label
                        (caret_id)
                        (block_arg_list
                          (value_use)
                          (type
                            (builtin_type
                              (float_type)))
                          (value_use)
                          (type
                            (builtin_type
                              (float_type)))))
                      (operation
                        (custom_operation
                          (linalg_dialect
                            (value_use_list
                              (value_use))
                            (type_list_no_parens
                              (type
                                (builtin_type
                                  (float_type))))))))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
================================================================================
dense attribute in linalg.depthwise_conv_1d_nwc_wcm
================================================================================
func.func @depthwise_conv_1d_nwc_wcm(%input: tensor<1x12x8xf32>, %filter: tensor<3x8x8xf32>)
  -> tensor<1x10x8x8xf32> {
  %zero = arith.constant 0.000000e+00 : f32
  %init = tensor.empty() : tensor<1x10x8x8xf32>
  %fill = linalg.fill ins(%zero : f32) outs(%init : tensor<1x10x8x8xf32>) -> tensor<1x10x8x8xf32>
  %0 = linalg.depthwise_conv_1d_nwc_wcm {dilations = dense<1> : tensor<1xi64>,
    strides = dense<1> : tensor<1xi64>}
    ins(%input, %filter : tensor<1x12x8xf32>, tensor<3x8x8xf32>)
    outs(%fill : tensor<1x10x8x8xf32>) -> tensor<1x10x8x8xf32>
  return %0 : tensor<1x10x8x8xf32>
}
--------------------------------------------------------------------------------
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (func_arg_list
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type)))))
          (value_use)
          (type
            (builtin_type
              (tensor_type
                (dim_list
                  (float_type))))))
        (func_return
          (type_list_attr_parens
            (type
              (builtin_type
                (tensor_type
                  (dim_list
                    (float_type)))))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (literal_and_type
                    (literal
                      (float_literal))
                    (type
                      (builtin_type
                        (float_type)))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (tensor_dialect
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (linalg_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (float_type))))
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type))))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (linalg_dialect
                  (attribute
                    (dictionary_attribute
                      (attribute_entry
                        (bare_id)
                        (literal
                          (tensor_literal
                            (integer_literal)))
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (integer_type))))))
                      (attribute_entry
                        (bare_id)
                        (literal
                          (tensor_literal
                            (integer_literal)))
                        (type
                          (builtin_type
                            (tensor_type
                              (dim_list
                                (integer_type))))))))
                  (value_use_list
                    (value_use)
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type))))))
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type))))))
                  (type
                    (builtin_type
                      (tensor_type
                        (dim_list
                          (float_type))))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (tensor_type
                          (dim_list
                            (float_type)))))))))))))))
================================================================================
fastmath attribute in arith
================================================================================
func.func @fastmath(%arg0: f32, %arg1: f32, %arg2: i32) {
  %0 = arith.addf %arg0, %arg1 fastmath<fast> : f32
  %1 = arith.subf %arg0, %arg1 fastmath<fast> : f32
  %2 = arith.mulf %arg0, %arg1 fastmath<fast> : f32
  %3 = arith.divf %arg0, %arg1 fastmath<fast> : f32
  %4 = arith.remf %arg0, %arg1 fastmath<fast> : f32
  %5 = arith.negf %arg0 fastmath<fast> : f32
  %6 = arith.addf %arg0, %arg1 fastmath<none> : f32
  %7 = arith.addf %arg0, %arg1 fastmath<nnan,ninf> : f32
  %8 = arith.mulf %arg0, %arg1 fastmath<reassoc,nnan,ninf,nsz,arcp,contract,afn> : f32
  return
}
--------------------------------------------------------------------------------
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (func_arg_list
          (value_use)
          (type
            (builtin_type
              (float_type)))
          (value_use)
          (type
            (builtin_type
              (float_type)))
          (value_use)
          (type
            (builtin_type
              (integer_type))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_use)))
              (custom_operation
                (arith_dialect
                  (value_use)
                  (value_use)
                  (fastmath_attr)
                  (type
                    (builtin_type
                      (float_type))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
