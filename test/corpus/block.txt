==========================================================================
Simple branching with comments
==========================================================================
func.func @simple(i64, i1) -> i64 {
^bb0(%a: i64, %cond: i1): // Code dominated by ^bb0 may refer to %a
  cf.cond_br %cond, ^bb1, ^bb2

^bb1:
  cf.br ^bb3(%a: i64)    // Branch passes %a as the argument

^bb2:
  %b = arith.addi %a, %a : i64
  cf.br ^bb3(%b: i64)    // Branch passes %b as the argument

// ^bb3 receives an argument, named %c, from predecessors
// and passes it on to bb4 along with %a. %a is referenced
// directly from its defining operation and is not passed through
// an argument of ^bb3.
^bb3(%c: i64):
  cf.br ^bb4(%c, %a : i64, i64)

^bb4(%d : i64, %e : i64):
  %0 = arith.addi %d, %e : i64
  return %0 : i64   // Return is also a terminator.
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (block_arg_attr_list
          (value_id_and_type_attr
            (type
              (builtin_type
                (integer_type))))
          (value_id_and_type_attr
            (type
              (builtin_type
                (integer_type)))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (integer_type)))))
        (region
          (block
            (block_label
              (caret_id)
              (block_arg_list
                (value_id_and_type
                  (value_id)
                  (type
                    (builtin_type
                      (integer_type))))
                (value_id_and_type
                  (value_id)
                  (type
                    (builtin_type
                      (integer_type))))))
            (comment)
            (operation
              (custom_operation
                (cf_dialect
                  (value_use
                    (value_id))
                  (successor
                    (caret_id))
                  (successor
                    (caret_id))))))
          (block
            (block_label
              (caret_id))
            (operation
              (custom_operation
                (cf_dialect
                  (successor
                    (caret_id)
                    (block_arg_list
                      (value_id_and_type
                        (value_id)
                        (type
                          (builtin_type
                            (integer_type))))))))))
          (comment)
          (block
            (block_label
              (caret_id))
            (operation
              (op_result_list
                (op_result
                  (value_id)))
              (custom_operation
                (arith_dialect
                  (value_use
                    (value_id))
                  (value_use
                    (value_id))
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (custom_operation
                (cf_dialect
                  (successor
                    (caret_id)
                    (block_arg_list
                      (value_id_and_type
                        (value_id)
                        (type
                          (builtin_type
                            (integer_type))))))))))
          (comment)
          (comment)
          (comment)
          (comment)
          (comment)
          (block
            (block_label
              (caret_id)
              (block_arg_list
                (value_id_and_type
                  (value_id)
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (custom_operation
                (cf_dialect
                  (successor
                    (caret_id)
                    (block_arg_list
                      (value_id_and_type
                        (value_id))
                      (value_id_and_type
                        (value_id)
                        (type
                          (builtin_type
                            (integer_type))))
                      (value_id_and_type
                        (type
                          (builtin_type
                            (integer_type))))))))))
          (block
            (block_label
              (caret_id)
              (block_arg_list
                (value_id_and_type
                  (value_id)
                  (type
                    (builtin_type
                      (integer_type))))
                (value_id_and_type
                  (value_id)
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (op_result_list
                (op_result
                  (value_id)))
              (custom_operation
                (arith_dialect
                  (value_use
                    (value_id))
                  (value_use
                    (value_id))
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_id_and_type
                    (value_id)
                    (type
                      (builtin_type
                        (integer_type))))))))
          (comment))))))
==========================================================================
Simple switch statement
==========================================================================
func.func @switch(%flag : i32, %caseOperand : i32) {
  cf.switch %flag : i32, [
    default: ^bb1(%caseOperand : i32),
    42: ^bb2(%caseOperand : i32),
    43: ^bb3(%caseOperand : i32)
  ]

  ^bb1(%bb1arg : i32):
    return
  ^bb2(%bb2arg : i32):
    return
  ^bb3(%bb3arg : i32):
    return
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (block_arg_attr_list
          (value_id_and_type_attr
            (value_id)
            (type
              (builtin_type
                (integer_type))))
          (value_id_and_type_attr
            (value_id)
            (type
              (builtin_type
                (integer_type)))))
        (region
          (entry_block
            (operation
              (custom_operation
                (cf_dialect
                  (value_id_and_type
                    (value_id)
                    (type
                      (builtin_type
                        (integer_type))))
                  (case_label)
                  (successor
                    (caret_id)
                    (block_arg_list
                      (value_id_and_type
                        (value_id)
                        (type
                          (builtin_type
                            (integer_type))))))
                  (case_label
                    (integer_literal))
                  (successor
                    (caret_id)
                    (block_arg_list
                      (value_id_and_type
                        (value_id)
                        (type
                          (builtin_type
                            (integer_type))))))
                  (case_label
                    (integer_literal))
                  (successor
                    (caret_id)
                    (block_arg_list
                      (value_id_and_type
                        (value_id)
                        (type
                          (builtin_type
                            (integer_type))))))))))
          (block
            (block_label
              (caret_id)
              (block_arg_list
                (value_id_and_type
                  (value_id)
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (custom_operation
                (func_dialect))))
          (block
            (block_label
              (caret_id)
              (block_arg_list
                (value_id_and_type
                  (value_id)
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (custom_operation
                (func_dialect))))
          (block
            (block_label
              (caret_id)
              (block_arg_list
                (value_id_and_type
                  (value_id)
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (custom_operation
                (func_dialect)))))))))
