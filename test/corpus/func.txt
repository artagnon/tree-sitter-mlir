==========================================================================
Function prototype
==========================================================================
func.func @abort()
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (block_arg_attr_list)))))
==========================================================================
Simple function using func, arith dialects
==========================================================================
func.func @test_addi(%arg0 : i64, %arg1 : i64) -> i64 {
  %0 = arith.addi %arg0, %arg1 : i64
  return %0 : i64
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (block_arg_attr_list
          (value_id_and_type_attr
            (value_id_and_type
              (value_id)
              (type
                (builtin_type
                  (integer_type)))))
          (value_id_and_type_attr
            (value_id_and_type
              (value_id)
              (type
                (builtin_type
                  (integer_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (integer_type)))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_id)))
              (custom_operation
                (arith_dialect
                  (value_use
                    (value_id))
                  (value_use
                    (value_id))
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_id_and_type
                    (value_id)
                    (type
                      (builtin_type
                        (integer_type)))))))))))))
==========================================================================
Multiple return values
==========================================================================
func.func @count(%x: i64) -> (i64, i64) {
  return %x, %x: i64, i64
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (block_arg_attr_list
          (value_id_and_type_attr
            (value_id_and_type
              (value_id)
              (type
                (builtin_type
                  (integer_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (integer_type)))
            (type
              (builtin_type
                (integer_type)))))
        (region
          (entry_block
            (operation
              (custom_operation
                (func_dialect
                  (value_id_and_type
                    (value_id))
                  (value_id_and_type
                    (value_id)
                    (type
                      (builtin_type
                        (integer_type))))
                  (value_id_and_type
                    (type
                      (builtin_type
                        (integer_type)))))))))))))
==========================================================================
Function with attribute
==========================================================================
func.func @count(%x: i64) -> (i64, i64)
  attributes { fruit: "banana" } {
  return %x, %x: i64, i64
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (block_arg_attr_list
          (value_id_and_type_attr
            (value_id_and_type
              (value_id)
              (type
                (builtin_type
                  (integer_type))))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (integer_type)))
            (type
              (builtin_type
                (integer_type)))))
        (dictionary_attribute
          (attribute_entry
            (bare_id)
            (attribute_value
              (builtin_attribute
                (literal
                  (string_literal))))))
        (region
          (entry_block
            (operation
              (custom_operation
                (func_dialect
                  (value_id_and_type
                    (value_id))
                  (value_id_and_type
                    (value_id)
                    (type
                      (builtin_type
                        (integer_type))))
                  (value_id_and_type
                    (type
                      (builtin_type
                        (integer_type)))))))))))))
==========================================================================
Function with result attribute
==========================================================================
func.func @example_fn_result() -> (f64 {dialectName.attrName = 0 : i64})
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (block_arg_attr_list)
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (float_type)))
            (dictionary_attribute
              (attribute_entry
                (bare_id)
                (attribute_value
                  (builtin_attribute
                    (literal
                      (integer_literal))
                    (type
                      (builtin_type
                        (integer_type)))))))))))))
==========================================================================
Function with argument attribute
==========================================================================
func.func @example_fn_arg(%x: i32 {swift.self = unit})
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (block_arg_attr_list
          (value_id_and_type_attr
            (value_id_and_type
              (value_id)
              (type
                (builtin_type
                  (integer_type))))
            (dictionary_attribute
              (attribute_entry
                (bare_id)
                (attribute_value
                  (builtin_attribute
                    (literal)))))))))))
==========================================================================
Variadic function
==========================================================================
llvm.func @variadic(...)
---
(toplevel
  (operation
    (custom_operation
      (llvm_dialect
        (symbol_ref_id)
        (block_arg_attr_list
          (value_id_and_type_attr
            (variadic)))))))
==========================================================================
Variadic function with other arguments
==========================================================================
llvm.func @variadic_args(i32, i32, ...)
---
(toplevel
  (operation
    (custom_operation
      (llvm_dialect
        (symbol_ref_id)
        (block_arg_attr_list
          (value_id_and_type_attr
            (value_id_and_type
              (type
                (builtin_type
                  (integer_type)))))
          (value_id_and_type_attr
            (value_id_and_type
              (type
                (builtin_type
                  (integer_type)))))
          (value_id_and_type_attr
            (variadic)))))))
