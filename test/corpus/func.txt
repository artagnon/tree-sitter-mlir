==========================================================================
Function prototype
==========================================================================
func.func @abort()
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list)))))
==========================================================================
Simple function using func, arith dialects
==========================================================================
func.func @test_addi(%arg0 : i64, %arg1 : i64) -> i64 {
  %0 = arith.addi %arg0, %arg1 : i64
  return %0 : i64
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_id)
          (type
            (builtin_type
              (integer_type)))
          (value_id)
          (type
            (builtin_type
              (integer_type))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (integer_type)))))
        (region
          (entry_block
            (operation
              (op_result_list
                (op_result
                  (value_id)))
              (custom_operation
                (arith_dialect
                  (value_use
                    (value_id))
                  (value_use
                    (value_id))
                  (type
                    (builtin_type
                      (integer_type))))))
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use
                      (value_id)))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (integer_type)))))))))))))
==========================================================================
Function with multiple return values
==========================================================================
func.func @count(%x: i64) -> (i64, i64) {
  return %x, %x: i64, i64
}
---
(toplevel
  (operation
    (custom_operation
      (func_dialect
        (symbol_ref_id)
        (function_arg_list
          (value_id)
          (type
            (builtin_type
              (integer_type))))
        (function_return
          (type_list_attr_parens
            (type
              (builtin_type
                (integer_type)))
            (type
              (builtin_type
                (integer_type)))))
        (region
          (entry_block
            (operation
              (custom_operation
                (func_dialect
                  (value_use_list
                    (value_use
                      (value_id))
                    (value_use
                      (value_id)))
                  (type_list_no_parens
                    (type
                      (builtin_type
                        (integer_type)))
                    (type
                      (builtin_type
                        (integer_type)))))))))))))
==========================================================================
Variadic function
==========================================================================
llvm.func @variadic(...)
---
(toplevel
  (operation
    (custom_operation
      (llvm_dialect
        (symbol_ref_id)
        (function_arg_list
          (variadic))))))
==========================================================================
Variadic function with other arguments
==========================================================================
llvm.func @variadic_args(i32, i32, ...)
---
(toplevel
  (operation
    (custom_operation
      (llvm_dialect
        (symbol_ref_id)
        (function_arg_list
          (type
            (builtin_type
              (integer_type)))
          (type
            (builtin_type
              (integer_type)))
          (variadic))))))
==========================================================================
Generic function in a module, with attributes
==========================================================================
module {
  "llvm.func"() ({
  }) {sym_name = "foo", function_type = !llvm.func<void ()>} : () -> ()
}
---
(toplevel
  (operation
    (custom_operation
      (builtin_dialect
        (region
          (entry_block
            (operation
              (generic_operation
                (string_literal)
                (region_list
                  (region))
                (dictionary_attribute
                  (attribute_entry
                    (bare_id)
                    (literal
                      (string_literal)))
                  (attribute_entry
                    (bare_id)
                    (type
                      (dialect_type
                        (pretty_dialect_item
                          (dialect_namespace)
                          (dialect_ident)
                          (pretty_dialect_item_contents))))))
                (function_type
                  (type_list_parens)
                  (type_list_parens))))))))))
